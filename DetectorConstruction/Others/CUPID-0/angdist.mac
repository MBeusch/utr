/run/initialize

#########################################################################
#
# AngularDistributionGenerator can create primary particles
# with an arbitrary angular distribution.
# An angular distribution is specified by three to four labels:
#
# /ang/stateN
#
# The labels are called 'states' in analogy to cascading
# transitions in gamma-ray spectroscopy. For such a transition,
# the labels are equal to the spins of the excited states
# in a cascade (and the parities via their sign).
# A list of the implemented angular distributions can
# be found below the macro commands.
# 
# All implemented distributions for cascades are
# assumed to be after excitation by a polarized beam that 
# propagates in positive z-direction. The polarization
# axis, which is perpendicular to the propagation axis,
# is assumed to be the x-axis.
#
# To simulate an unpolarized beam, use the
#
# /ang/polarized BOOL
# 
# command. If an unpolarized beam is set, the angular
# distributions of both possible polarizations 
# (along the x-axis and along the y-axis) will
# be added up to create the unpolarized distribution.
# That means that both of them need to be implemented.
#
#
#########################################################################

/ang/particle gamma
/ang/energy 2.98 MeV

/ang/nstates 3
/ang/state1 0.
/ang/state2 0.
/ang/state3 0.
/ang/polarized false

# For gamma-ray transitions, several multipole orders may contributed
# to a transition. This effect is quantified by the multipole mixing
# ratio. The multipole mixing ratios of a transition can be set via
# /ang/delta(N)(N+1)
# where N is the number of the first state in the transition.
# At the moment, only the mixing ratio between the two dominant
# multipole orders can be given. 
/ang/delta12 0.
/ang/delta23 0.

/ang/sourceX 0. mm
/ang/sourceY 0. mm
/ang/sourceZ 0. mm
#/ang/sourceZ 1574.80 mm # Ideal position of 2nd target in generation '18 geometries
#/ang/sourceZ 1612.10 mm # Ideal position of 2nd target in generation '16/17 geometries

/ang/sourceDX 46. mm
/ang/sourceDY 46. mm
/ang/sourceDZ 58. mm

/ang/sourcePV crystal

/run/beamOn 1000000

# Below follows a list of all implemented angular distributions.
# In each case, up to two possible labels are given by which the
# corresponding angular distributions can be selected.
# A description the the angular distributions is given below the
# bullet point.
#
# * `states == {0.1, 0.1, 0.1}`
#     Wildcard for test distributions
# * `states == {0., 0., 0.}`
#     Isotropic distribution
# * `states == {0., 1., 0.} or {-0.1, -1., -0.1}`
#     0<sup>±</sup> → 1<sup>±</sup> → 0<sup>±</sup>
# * `states == {0., -1., 0.} or {-0.1, 1., -0.1}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 0<sup>±</sup>
# * `states == {0., 2., 0.} or {-0.1, -2., -0.1}`
#     0<sup>±</sup> → 2<sup>±</sup> → 0<sup>±</sup>
# * `states == {0., 2., 2.} or {-0.1, -2., -2.}`
#     0<sup>±</sup> → 2<sup>±</sup> → 2<sup>±</sup>
# * `states == {0., 1., 2.} or {-0.1, -1., -2.}`
#     0<sup>±</sup> → 1<sup>±</sup> → 2<sup>±</sup>
# * `states == {0., -1., 2.} or {-0.1, 1., -2.}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 2<sup>±</sup>
# * `states == {1.5, -2.5, 1.5} or {-1.5, 2.5, -1.5}`
#     3/2<sup>±</sup> → 5/2<sup>∓</sup> → 3/2<sup>±</sup>
# * `states == {1.5, 2.5, 1.5} or {-1.5, -2.5, -1.5}`
#     3/2<sup>±</sup> → 5/2<sup>±</sup> → 3/2<sup>±</sup>
# * `states == {1.5, 1.5, 1.5} or {-1.5, -1.5, -1.5}`
#     3/2<sup>±</sup> → 3/2<sup>±</sup> → 3/2<sup>±</sup>
# * `states == {1.5, -1.5, 1.5} or {-1.5, 1.5, -1.5}`
#     3/2<sup>±</sup> → 3/2<sup>∓</sup> → 3/2<sup>±</sup>
# * `states == {0.5, 1.5, 0.5} or {-0.5, -1.5, -0.5}`
#     1/2<sup>±</sup> → 3/2<sup>±</sup> → 1/2<sup>±</sup>
# * `states == {0.5, -1.5, 0.5} or {-0.5, 1.5, -0.5}`
#     1/2<sup>±</sup> → 3/2<sup>∓</sup> → 1/2<sup>±</sup>
# * `states == {2.5, 1.5, 2.5} or {-2.5, -1.5, -2.5}`
#     5/2<sup>±</sup> → 3/2<sup>±</sup> → 5/2<sup>±</sup>
# * `states == {2.5, -1.5, 2.5} or {-2.5, 1.5, -2.5}`
#     5/2<sup>±</sup> → 3/2<sup>∓</sup> → 5/2<sup>±</sup>
# * `states == {2.5, 2.5, 2.5} or {-2.5, -2.5, -2.5}`
#     5/2<sup>±</sup> → 5/2<sup>±</sup> → 5/2<sup>±</sup>
# * `states == {2.5, -2.5, 2.5} or {-2.5, 2.5, -2.5}`
#     5/2<sup>±</sup> → 5/2<sup>∓</sup> → 5/2<sup>±</sup>
# * `states == {2.5, 3.5, 2.5} or {-2.5, -3.5, -2.5}`
#     5/2<sup>±</sup> → 7/2<sup>±</sup> → 5/2<sup>±</sup>
# * `states == {2.5, -3.5, 2.5} or {-2.5, 3.5, -2.5}`
#     5/2<sup>±</sup> → 7/2<sup>∓</sup> → 5/2<sup>±</sup>
# * `states == {0., -1.0, 0.0, 1.0} or states == {-0.1, 1.0, 0.0, 1.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 0 → 1
# * `states == {0., -1.0, 0.0, 2.0} or states == {-0.1, 1.0, 0.0, 2.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 0 → 2
# * `states == {0., -1.0, 0.0, 3.0} or states == {-0.1, 1.0, 0.0, 3.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 0 → 3
# * `states == {0., -1.0, 0.0, 4.0} or states == {-0.1, 1.0, 0.0, 4.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 0 → 4
# * `states == {0., -1.0, 0.0, 5.0} or states == {-0.1, 1.0, 0.0, 5.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 0 → 5
# * `states == {0., -1.0, 0.0, 6.0} or states == {-0.1, 1.0, 0.0, 6.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 0 → 6
# * `states == {0., -1.0, 1.0, 0.0} or states == {-0.1, 1.0, 1.0, 0.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 1 → 0
# * `states == {0., -1.0, 1.0, 1.0} or states == {-0.1, 1.0, 1.0, 1.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 1 → 1
# * `states == {0., -1.0, 1.0, 2.0} or states == {-0.1, 1.0, 1.0, 2.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 1 → 2
# * `states == {0., -1.0, 1.0, 3.0} or states == {-0.1, 1.0, 1.0, 3.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 1 → 3
# * `states == {0., -1.0, 1.0, 4.0} or states == {-0.1, 1.0, 1.0, 4.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 1 → 4
# * `states == {0., -1.0, 1.0, 5.0} or states == {-0.1, 1.0, 1.0, 5.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 1 → 5
# * `states == {0., -1.0, 1.0, 6.0} or states == {-0.1, 1.0, 1.0, 6.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 1 → 6
# * `states == {0., -1.0, 2.0, 0.0} or states == {-0.1, 1.0, 2.0, 0.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 2 → 0
# * `states == {0., -1.0, 2.0, 1.0} or states == {-0.1, 1.0, 2.0, 1.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 2 → 1
# * `states == {0., -1.0, 2.0, 2.0} or states == {-0.1, 1.0, 2.0, 2.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 2 → 2
# * `states == {0., -1.0, 2.0, 3.0} or states == {-0.1, 1.0, 2.0, 3.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 2 → 3
# * `states == {0., -1.0, 2.0, 4.0} or states == {-0.1, 1.0, 2.0, 4.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 2 → 4
# * `states == {0., -1.0, 2.0, 5.0} or states == {-0.1, 1.0, 2.0, 5.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 2 → 5
# * `states == {0., -1.0, 2.0, 6.0} or states == {-0.1, 1.0, 2.0, 6.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 2 → 6
# * `states == {0., -1.0, 3.0, 0.0} or states == {-0.1, 1.0, 3.0, 0.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 3 → 0
# * `states == {0., -1.0, 3.0, 1.0} or states == {-0.1, 1.0, 3.0, 1.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 3 → 1
# * `states == {0., -1.0, 3.0, 2.0} or states == {-0.1, 1.0, 3.0, 2.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 3 → 2
# * `states == {0., -1.0, 3.0, 3.0} or states == {-0.1, 1.0, 3.0, 3.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 3 → 3
# * `states == {0., -1.0, 3.0, 4.0} or states == {-0.1, 1.0, 3.0, 4.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 3 → 4
# * `states == {0., -1.0, 3.0, 5.0} or states == {-0.1, 1.0, 3.0, 5.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 3 → 5
# * `states == {0., -1.0, 3.0, 6.0} or states == {-0.1, 1.0, 3.0, 6.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 3 → 6
# * `states == {0., -1.0, 4.0, 0.0} or states == {-0.1, 1.0, 4.0, 0.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 4 → 0
# * `states == {0., -1.0, 4.0, 1.0} or states == {-0.1, 1.0, 4.0, 1.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 4 → 1
# * `states == {0., -1.0, 4.0, 2.0} or states == {-0.1, 1.0, 4.0, 2.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 4 → 2
# * `states == {0., -1.0, 4.0, 3.0} or states == {-0.1, 1.0, 4.0, 3.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 4 → 3
# * `states == {0., -1.0, 4.0, 4.0} or states == {-0.1, 1.0, 4.0, 4.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 4 → 4
# * `states == {0., -1.0, 4.0, 5.0} or states == {-0.1, 1.0, 4.0, 5.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 4 → 5
# * `states == {0., -1.0, 4.0, 6.0} or states == {-0.1, 1.0, 4.0, 6.0}`
#     0<sup>±</sup> → 1<sup>∓</sup> → 4 → 6
# * `states == {0., 1.0, 0.0, 1.0} or states == {-0.1, -1.0, 0.0, 1.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 0 → 1
# * `states == {0., 1.0, 0.0, 2.0} or states == {-0.1, -1.0, 0.0, 2.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 0 → 2
# * `states == {0., 1.0, 0.0, 3.0} or states == {-0.1, -1.0, 0.0, 3.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 0 → 3
# * `states == {0., 1.0, 0.0, 4.0} or states == {-0.1, -1.0, 0.0, 4.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 0 → 4
# * `states == {0., 1.0, 0.0, 5.0} or states == {-0.1, -1.0, 0.0, 5.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 0 → 5
# * `states == {0., 1.0, 0.0, 6.0} or states == {-0.1, -1.0, 0.0, 6.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 0 → 6
# * `states == {0., 1.0, 1.0, 0.0} or states == {-0.1, -1.0, 1.0, 0.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 1 → 0
# * `states == {0., 1.0, 1.0, 1.0} or states == {-0.1, -1.0, 1.0, 1.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 1 → 1
# * `states == {0., 1.0, 1.0, 2.0} or states == {-0.1, -1.0, 1.0, 2.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 1 → 2
# * `states == {0., 1.0, 1.0, 3.0} or states == {-0.1, -1.0, 1.0, 3.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 1 → 3
# * `states == {0., 1.0, 1.0, 4.0} or states == {-0.1, -1.0, 1.0, 4.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 1 → 4
# * `states == {0., 1.0, 1.0, 5.0} or states == {-0.1, -1.0, 1.0, 5.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 1 → 5
# * `states == {0., 1.0, 1.0, 6.0} or states == {-0.1, -1.0, 1.0, 6.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 1 → 6
# * `states == {0., 1.0, 2.0, 0.0} or states == {-0.1, -1.0, 2.0, 0.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 2 → 0
# * `states == {0., 1.0, 2.0, 1.0} or states == {-0.1, -1.0, 2.0, 1.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 2 → 1
# * `states == {0., 1.0, 2.0, 2.0} or states == {-0.1, -1.0, 2.0, 2.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 2 → 2
# * `states == {0., 1.0, 2.0, 3.0} or states == {-0.1, -1.0, 2.0, 3.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 2 → 3
# * `states == {0., 1.0, 2.0, 4.0} or states == {-0.1, -1.0, 2.0, 4.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 2 → 4
# * `states == {0., 1.0, 2.0, 5.0} or states == {-0.1, -1.0, 2.0, 5.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 2 → 5
# * `states == {0., 1.0, 2.0, 6.0} or states == {-0.1, -1.0, 2.0, 6.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 2 → 6
# * `states == {0., 1.0, 3.0, 0.0} or states == {-0.1, -1.0, 3.0, 0.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 3 → 0
# * `states == {0., 1.0, 3.0, 1.0} or states == {-0.1, -1.0, 3.0, 1.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 3 → 1
# * `states == {0., 1.0, 3.0, 2.0} or states == {-0.1, -1.0, 3.0, 2.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 3 → 2
# * `states == {0., 1.0, 3.0, 3.0} or states == {-0.1, -1.0, 3.0, 3.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 3 → 3
# * `states == {0., 1.0, 3.0, 4.0} or states == {-0.1, -1.0, 3.0, 4.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 3 → 4
# * `states == {0., 1.0, 3.0, 5.0} or states == {-0.1, -1.0, 3.0, 5.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 3 → 5
# * `states == {0., 1.0, 3.0, 6.0} or states == {-0.1, -1.0, 3.0, 6.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 3 → 6
# * `states == {0., 1.0, 4.0, 0.0} or states == {-0.1, -1.0, 4.0, 0.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 4 → 0
# * `states == {0., 1.0, 4.0, 1.0} or states == {-0.1, -1.0, 4.0, 1.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 4 → 1
# * `states == {0., 1.0, 4.0, 2.0} or states == {-0.1, -1.0, 4.0, 2.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 4 → 2
# * `states == {0., 1.0, 4.0, 3.0} or states == {-0.1, -1.0, 4.0, 3.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 4 → 3
# * `states == {0., 1.0, 4.0, 4.0} or states == {-0.1, -1.0, 4.0, 4.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 4 → 4
# * `states == {0., 1.0, 4.0, 5.0} or states == {-0.1, -1.0, 4.0, 5.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 4 → 5
# * `states == {0., 1.0, 4.0, 6.0} or states == {-0.1, -1.0, 4.0, 6.0}`
#     0<sup>±</sup> → 1<sup>±</sup> → 4 → 6
# * `states == {0., 2.0, 0.0, 1.0} or states == {-0.1, -2.0, 0.0, 1.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 0 → 1
# * `states == {0., 2.0, 0.0, 2.0} or states == {-0.1, -2.0, 0.0, 2.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 0 → 2
# * `states == {0., 2.0, 0.0, 3.0} or states == {-0.1, -2.0, 0.0, 3.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 0 → 3
# * `states == {0., 2.0, 0.0, 4.0} or states == {-0.1, -2.0, 0.0, 4.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 0 → 4
# * `states == {0., 2.0, 0.0, 5.0} or states == {-0.1, -2.0, 0.0, 5.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 0 → 5
# * `states == {0., 2.0, 0.0, 6.0} or states == {-0.1, -2.0, 0.0, 6.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 0 → 6
# * `states == {0., 2.0, 1.0, 0.0} or states == {-0.1, -2.0, 1.0, 0.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 1 → 0
# * `states == {0., 2.0, 1.0, 1.0} or states == {-0.1, -2.0, 1.0, 1.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 1 → 1
# * `states == {0., 2.0, 1.0, 2.0} or states == {-0.1, -2.0, 1.0, 2.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 1 → 2
# * `states == {0., 2.0, 1.0, 3.0} or states == {-0.1, -2.0, 1.0, 3.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 1 → 3
# * `states == {0., 2.0, 1.0, 4.0} or states == {-0.1, -2.0, 1.0, 4.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 1 → 4
# * `states == {0., 2.0, 1.0, 5.0} or states == {-0.1, -2.0, 1.0, 5.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 1 → 5
# * `states == {0., 2.0, 1.0, 6.0} or states == {-0.1, -2.0, 1.0, 6.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 1 → 6
# * `states == {0., 2.0, 2.0, 0.0} or states == {-0.1, -2.0, 2.0, 0.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 2 → 0
# * `states == {0., 2.0, 2.0, 1.0} or states == {-0.1, -2.0, 2.0, 1.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 2 → 1
# * `states == {0., 2.0, 2.0, 2.0} or states == {-0.1, -2.0, 2.0, 2.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 2 → 2
# * `states == {0., 2.0, 2.0, 3.0} or states == {-0.1, -2.0, 2.0, 3.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 2 → 3
# * `states == {0., 2.0, 2.0, 4.0} or states == {-0.1, -2.0, 2.0, 4.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 2 → 4
# * `states == {0., 2.0, 2.0, 5.0} or states == {-0.1, -2.0, 2.0, 5.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 2 → 5
# * `states == {0., 2.0, 2.0, 6.0} or states == {-0.1, -2.0, 2.0, 6.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 2 → 6
# * `states == {0., 2.0, 3.0, 0.0} or states == {-0.1, -2.0, 3.0, 0.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 3 → 0
# * `states == {0., 2.0, 3.0, 1.0} or states == {-0.1, -2.0, 3.0, 1.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 3 → 1
# * `states == {0., 2.0, 3.0, 2.0} or states == {-0.1, -2.0, 3.0, 2.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 3 → 2
# * `states == {0., 2.0, 3.0, 3.0} or states == {-0.1, -2.0, 3.0, 3.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 3 → 3
# * `states == {0., 2.0, 3.0, 4.0} or states == {-0.1, -2.0, 3.0, 4.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 3 → 4
# * `states == {0., 2.0, 3.0, 5.0} or states == {-0.1, -2.0, 3.0, 5.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 3 → 5
# * `states == {0., 2.0, 3.0, 6.0} or states == {-0.1, -2.0, 3.0, 6.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 3 → 6
# * `states == {0., 2.0, 4.0, 0.0} or states == {-0.1, -2.0, 4.0, 0.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 4 → 0
# * `states == {0., 2.0, 4.0, 1.0} or states == {-0.1, -2.0, 4.0, 1.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 4 → 1
# * `states == {0., 2.0, 4.0, 2.0} or states == {-0.1, -2.0, 4.0, 2.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 4 → 2
# * `states == {0., 2.0, 4.0, 3.0} or states == {-0.1, -2.0, 4.0, 3.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 4 → 3
# * `states == {0., 2.0, 4.0, 4.0} or states == {-0.1, -2.0, 4.0, 4.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 4 → 4
# * `states == {0., 2.0, 4.0, 5.0} or states == {-0.1, -2.0, 4.0, 5.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 4 → 5
# * `states == {0., 2.0, 4.0, 6.0} or states == {-0.1, -2.0, 4.0, 6.0}`
#     0<sup>±</sup> → 2<sup>±</sup> → 4 → 6
